---
type Stock = {
  id: number;
  partnumber: string;
  description: string;
  qty: number;
  url: string;
  safeqty: number;
  types:string;
};

interface Props {
  stock: Stock | null;
}

const { stock } = Astro.props as Props;
---

<dialog id="dialog2" style="background-color: rgb(60, 61, 63);width :30%;">
  <div class=" text-theme-text shadow-xl rounded-md w-full max-w-x backdrop:bg-black/60">
    <div class="p-4 sm:p-8 grid gap-6">
      <form class="grid gap-4" id="update-form" >
        <h2 class="text-xl text-theme-accent font-bold leading-tight">修改库存</h2>
        <div class="grid gap-2">
          <div class="flex items-center gap-2">
            <label class="text-sm font-medium w-1/3">ID</label>
            <input type="number" name="id" class="w-2/3 p-2 border border-gray-300 rounded-md" readonly />
          </div>
        </div>
        <div class="grid gap-2">
          <div class="flex items-center gap-2">
            <label class="text-sm font-medium w-1/3">PN</label>
            <input type="text" name="partnumber" class="w-2/3 p-2 border border-gray-300 rounded-md" />
          </div>
        </div>
        <div class="grid gap-2">
          <div class="flex items-center gap-2">
            <label class="text-sm font-medium w-1/3">DS</label>
            <input type="text" name="description" class="w-2/3 p-2 border border-gray-300 rounded-md" />
          </div>
        </div>
        <div class="grid gap-2">
          <div class="flex items-center gap-2">
            <label class="text-sm font-medium w-1/3">QTY</label>
            <input type="number" name="qty" class="w-2/3 p-2 border border-gray-300 rounded-md" />
          </div>
        </div>
        <div class="grid gap-2">
          <div class="flex items-center gap-2">
            <label class="text-sm font-medium w-1/3">URL</label>
            <input type="text" name="url" class="w-2/3 p-2 border border-gray-300 rounded-md" />
          </div>
        </div>
        <div class="grid gap-2">
          <div class="flex items-center gap-2">
            <label class="text-sm font-medium w-1/3">SQTY</label>
            <input type="number" name="safeqty" class="w-2/3 p-2 border border-gray-300 rounded-md" />
          </div>
        </div>
        <div class="grid gap-2">
          <div class="flex items-center gap-2">
            <label class="text-sm font-medium w-1/3">TYPES</label>
            <input type="text" name="types" class="w-2/3 p-2 border border-gray-300 rounded-md" />
          </div>
        </div>
        <div class="flex justify-end gap-4 mt-4">
          <button type="button" class="px-4 py-2 bg-primary text-white rounded-md" id="delete-this-item">Delete</button>
          <button type="button" class="px-4 py-2 bg-primary text-white rounded-md" id="close-dialog">Close</button>
          <button type="submit" class="px-4 py-2 bg-accent text-white rounded-md">Update</button>
        </div>
      </form>
    </div>
  </div>
</dialog>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const updateForm = document.getElementById("update-form") as HTMLFormElement | null;
    const closeDialogBtn = document.getElementById("close-dialog") as HTMLButtonElement | null;
    const dialog = document.getElementById("dialog2") as HTMLDialogElement | null;
    const deleteBtns = document.getElementById("delete-this-item") as HTMLButtonElement | null;
    if (!updateForm || !closeDialogBtn || !dialog) {
      console.error("One or more elements are missing");
      return;
    }

    // 关闭对话框
    closeDialogBtn.addEventListener("click", () => dialog.close());
    dialog.addEventListener("click", (e) => {
      if (e.target === e.currentTarget) {
        dialog.close();
      }
    });


    
deleteBtns?.addEventListener( "click",async (e:any) => {
  const formData = new FormData(updateForm);
  const id = formData.get("id");
  e.preventDefault();
  try {
          const response = await fetch(`/api/${id}.json`, {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
            },
          });

          const result = await response.json();
          console.log(result);
        if (result.success) {
          dialog.close();
          location.reload();
        } else {
          throw new Error(result.message);
        }
          console.log("deleted");
        } catch (error) {
          console.error(error);
        }
} );

    
    // 提交表单
    updateForm.addEventListener("submit", async (e:any) => {
      e.preventDefault();
      try {
        const formData = new FormData(updateForm);
        const stockData = {
          id: formData.get("id"),
          partnumber: formData.get("partnumber"),
          description: formData.get("description"),
          qty: formData.get("qty"),
          url: formData.get("url"),
          safeqty: formData.get("safeqty"),
          types:formData.get("types")
        };

        const response = await fetch(`/api/${stockData.id}.json`, {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(stockData),
        });

        const result = await response.json();
        if (result.success) {
          dialog.close();
          location.reload();
        } else {
          throw new Error(result.message);
        }
      } catch (error) {
  if (error instanceof Error) { // 使用 instanceof 进行类型检查
    alert(error.message); // 确保 error 是 Error 类型
  } else {
    console.error('An unknown error occurred:', error);
  }
}
    });
  });
</script>
