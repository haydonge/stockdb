---
import StockCard from "../components/ui/StockCard.astro";
import BaseLayout from "../layouts/BaseLayout.astro";
import StockTable from "../components/ui/stockTable.astro";
import { Stockonhand } from "astro:db";
import { db } from "astro:db";
import UpdateDiaglog from "../components/ui/UpdateDiaglog.astro";

import Button from "@/components/ui/Button.astro";
type Stockt = {
  id: number;
  partnumber: string;
  description: string;
  qty: number;
  url: string;
  safeqty: number;
  types:string;
};

interface Props {
  stock: Stockt | null;
}

const { stock } = Astro.props as Props;
// 从数据库获取默认数据
const defaultStocks = await db.select().from(Stockonhand);
const filteredStocks =  defaultStocks;

---

<BaseLayout>
  <!-- <div class="flex justify-center items-end gap-48">
    <form class="flex items-end gap-4 " id="search-form2">
    </form>
  </div>
  <br> -->
  <main class="flex flex-col items-center space-y-4">
    <!-- <h3 class="text-xl text-theme-accent font-bold leading-tight">
      搜索库存
    </h3> -->
    <form class="form flex items-center justify-center space-x-9" id="form1">
        <label for="search">Search DataBase </label>
       <input 
        type="text"
        required
        min="2"
        max="24"
        name="search"
        id="search"
        placeholder="Enter a search term…"
        class=" border border-white" /> 
        <Button intent="accent" type="submit">Search</Button>
    </form>

    <p id="searchReadout"> </p>
  </main>
     
  <section aria-label="Search Results">
    <div class="overflow-x-auto">
      <table class="min-w-full text-l table-auto">
        <thead>
          <tr class="text-center text-base border-b-2 border-gray-300">
            <th class="px-6 py-3">ID</th>
            <th class="px-6 py-3">Part Number</th>
            <th class="px-6 py-3">Description</th>
            <th class="px-6 py-3">Qty</th>
            <th class="px-6 py-3">SafeQty</th>
            <th class="px-6 py-3">URL</th>
            <th class="px-6 py-3">TYPES</th>
            <th class="px-6 py-3">Action</th>  
          </tr>
        </thead>
        <tbody id="searchResults"></tbody>
      </table>
    </div>
    <div id="stockTableContainer">
      <!-- <StockTable stocks={filteredStocks}/> -->
    </div>
  </section>
<UpdateDiaglog stock={null} />
  
<script>
  //selector
  const search = document.querySelector("#search") as HTMLInputElement;
  const searchsubmit =document.querySelector("#form1") as HTMLFormElement;
  const searchResult =document.querySelector("#searchResults")!; //非空声明

  // const SPINNER = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#d70f0f" viewBox="0 0 256 256" id="spinner"><path d="M236,128a108,108,0,0,1-216,0c0-42.52,24.73-81.34,63-98.9A12,12,0,1,1,93,50.91C63.24,64.57,44,94.83,44,128a84,84,0,0,0,168,0c0-33.17-19.24-63.43-49-77.09A12,12,0,1,1,173,29.1C211.27,46.66,236,85.48,236,128Z"></path><style>
	// 			#spinner {
	// 				animation: spin 1s linear infinite;
	// 			}
	// 			@keyframes spin {
	// 				100% {
	// 					transform: rotate(360deg);
	// 				}
	// 			}
	// 			</style></svg>`;

  type Stockt = {
  id: number;
  partnumber: string;
  description: string;
  qty: number;
  url: string;
  safeqty: number;
  types:string;
};

  // let SEARCH_DATA;
      
      import sanitizeHtml from "sanitize-html";
      import DOMPurify from "dompurify"
  

    function updateDocumentTitle(search:string) {
      document.title = search
      ?`Search Result for "${search}"`:"Search the database";
    }



     function updateSearchPageURL(search:string) {
				const url = new URL(window.location.href);
				url.searchParams.set("q", search);
				window.history.replaceState(null, "", url);
       }


       function generateSearchList(result:Stockt[]):string {
        return result.map((r:Stockt) => {
            const { id, partnumber, description, qty, url, safeqty,types } = r;

           return `
            <tr  class="text-center">
                <td class="py-2">${id}</td>
                <td class="py-2">${partnumber}</td>
                <td class="py-2">${description}</td>
                <td class="py-2">${qty}</td>
                <td class="py-2">${safeqty}</td>
                <td class="py-2"> <a href=${url} class="text-blue-500 hover:underline mr-4"> Link </a> </td>
                <td class="py-2">${types}</td>
                <td>  <button
                  data-update
                  data-id=${id}
                  data-partnumber=${partnumber}
                  data-description=${description}
                  data-qty=${qty}
                  data-url=${url}
                  data-safeqty=${safeqty}
                  data-types=${types}
                  classes="absolute -right-1 -bottom-1 border-4 border-theme-base hover:scale-105 active:scale-95 ring-offset-2"
                  aria-label={"Update Link: ${partnumber}"}
                  class="text-red-500 hover:text-red-700"             
                }> Update </button>
              
                </td>
            </tr>
        `;
    }).join(" ");
}

function attachUpdateEventListeners() {
      const updateBtns = document.querySelectorAll("[data-update]");
      updateBtns.forEach(btn => {
        btn.addEventListener("click", () => {
          const stocks = {
            id: btn.getAttribute("data-id"),
            partnumber: btn.getAttribute("data-partnumber"),
            description: btn.getAttribute("data-description"),
            qty: btn.getAttribute("data-qty"),
            url: btn.getAttribute("data-url"),
            safeqty: btn.getAttribute("data-safeqty"),
            types:btn.getAttribute("data-types"),
          };
          const dialog2 = document.getElementById("dialog2") as HTMLDialogElement;
          if (dialog2) {
            const formupdate :any = dialog2.querySelector("form");
            formupdate.querySelector("[name='id']").value = stocks.id;
            formupdate.querySelector("[name='partnumber']").value = stocks.partnumber;
            formupdate.querySelector("[name='description']").value = stocks.description;
            formupdate.querySelector("[name='qty']").value = stocks.qty;
            formupdate.querySelector("[name='url']").value = stocks.url;
            formupdate.querySelector("[name='safeqty']").value = stocks.safeqty;
            formupdate.querySelector("[name='types']").value = stocks.types;
            dialog2.showModal();
          }
        });
      });
    }
      

    async function fetchSearchResults(search_word:string) {
				if (search_word.length === 0) return;
				  // searchResult.innerHTML =SPINNER;
					try {
						const res =  await fetch(`/api/searchdata.json`,{
              method: "SEARCH",
              headers: {"Content-Type": "application/json",   },
              body: JSON.stringify(search_word )
              });
            const { success, data, message } = await res.json();
						const results = data;
            // updateStockTable(SEARCH_DATA);
            searchResult.innerHTML = results.length >0 ? generateSearchList(results): "Not Found Data"
            attachUpdateEventListeners(); //重点
					} catch (e) {
						console.error(e);
					}		
			}



     window.addEventListener("DOMContentLoaded", () => {
       const urlParams = DOMPurify.sanitize(
         new URLSearchParams(window.location.search).get("q") as string );
        fetchSearchResults(urlParams);
        updateDocumentTitle(urlParams);
        search.value =urlParams;
        search.focus();
       });
     

      searchsubmit.addEventListener("submit", async (e) => {
        e.preventDefault();
       try {
        const searchValue = DOMPurify.sanitize(search.value)
        updateDocumentTitle(searchValue);
        const urlParams = new URLSearchParams(window.location.search).get("q") ;
				fetchSearchResults(searchValue);
        // search.value = searchValue;
				updateSearchPageURL(searchValue);

        } catch (e) {       // 捕获异常并弹出警告
      if (e instanceof Error) {
        alert(e.message);
      }
      console.error(e);
    }
			});


</script>

</BaseLayout>
